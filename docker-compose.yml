version: '3'
services:
    web:
      build:
        context: .  # buildするディレクトリを記述
        dockerfile: /node.js/dockerfile # dockerfileの場所を記述
      container_name: node.js
      image:  node:16-alpine3.15

      # ttyを許可をすると/bin/bashでコンテナに入ることができる。
      # 開発時にはtrueにして、テスト/本番環境はfalseにする。
      tty: true

      environment:
        - MYSQL_SERVER=mysql
        - MYSQL_USER=${DB_USER}
        - MYSQL_PASSWORD=${DB_PASS}
        - MYSQL_DATABASE=${DB_NAME}
        - TZ=${TZ}
        - CHOKIDAR_USEPOLLING=true

      # ホストのディレクトリにマウント
      # bindはお互いに同期している。volumesはコンテナ側のコードをかえれば、volumeに指定したディレクトリが更新される
      volumes: 
        - type: bind  #ホストからの書き込みをコンテナ内に反映
          source: "./node.js/node-project"
          target: "/app"
        # できない、後回し
       
      ports:
        - "3000:3000"  #   - ${ホスト側}:${コンテナ側}
      
      #依存するコンテなのネットワークを記述   
      depends_on: #dbの起動を待つ
        - db

    db:
      container_name: mysql
      image: mysql:8.0.23

      # 環境変数を設定
      environment:
        - MYSQL_ROOT_HOST=${DB_ROOT_HOST} 
        # - MYSQL_USER=${DB_USER} #rootにするとエラーが出る
        # - MYSQL_PASSWORD=${DB_PASS}
        - MYSQL_ROOT_PASSWORD=${DB_PASS}
        - TZ=${TZ}
        - MYSQL_SERVER=db  # dbはMySQLのサービス名です

      # ボリュームバインド
      volumes:
        - ./mysql/conf:/etc/mysql/conf/:ro #読み取り専用ディレクトリ
        - ./mysql/logs:/var/log/mysql

      # ローカルで他コンテナと通信をしたい場合に繋げる。
      # expose:
      #   - ${ コンテナ間で開けるポート番号 }

      ports:
        - "3306:3306"
      env_file: .env # 環境変数を指定
      tty: true
